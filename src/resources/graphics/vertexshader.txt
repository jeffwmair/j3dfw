varying vec4 diffuse, specular;

void main(void)
{
	//  multiply object space position by mvp matrix
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
	
	vec3 N = normalize(gl_NormalMatrix * gl_Normal);
	vec4 V = gl_ModelViewMatrix * gl_Vertex;
	vec3 L = normalize(gl_LightSource[0].position.xyz - V.xyz);
	
	vec3 H = normalize(L + vec3(0.0, 0.0, 1.0));
	

	// diffuse color
	float NdotL = max(0.0, dot(N, L));
	diffuse = vec4(0.0);// gl_Color * vec4(NdotL);
	
	diffuse.x = gl_FrontMaterial.diffuse.x;
	diffuse.y = gl_FrontMaterial.diffuse.y;
	diffuse.z = gl_FrontMaterial.diffuse.z;
	
	diffuse = diffuse * vec4(NdotL);
	
	diffuse.x += gl_FrontMaterial.ambient.x;
	diffuse.y += gl_FrontMaterial.ambient.y;
	diffuse.z += gl_FrontMaterial.ambient.z;
	
	// specular color
	const float specularExp = 1.5;
	float NdotH = max(0.0, dot(N, H));
	specular = vec4(0.0);
	if (NdotH > 0.0)
		specular = vec4(pow(NdotH, specularExp));
		
	// Jeff: attenuate based on actual specular settings
	specular.x *= gl_FrontMaterial.specular.x;
	specular.y *= gl_FrontMaterial.specular.y;
	specular.z *= gl_FrontMaterial.specular.z;
	
	
	gl_FrontColor = diffuse + specular;
	

}